{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monday","mondaySdk","App","props","filter","a","state","boardIDs","api","data","list","boards","board","items","item","column_values","columnValue","filterUser","teammates","length","push","boardID","id","boardName","name","value","JSON","parse","includes","storage","instance","getItem","order","split","map","orderID","find","listItem","setState","listen","res","users","boardIds","statusCol","columns","col","statusColSettings","settings_str","Container","className","style","padding","List","this","setList","newState","toStore","setItem","join","key","textAlign","Button","variant","onClick","e","deleteItem","console","log","React","Component","ListRow","status","marginTop","marginBottom","Grid","container","spacing","ListItem","button","xs","ListItemText","Select","width","text","onChange","evt","index","target","Object","entries","labels","stringify","parseInt","replace","catch","MenuItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d4918c0f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// Default state\n\t\tthis.state = {\n\t\t\tlist: [],\n\t\t};\n\t}\n\n\tfilter = async () => {\n\t\tif (this.state.boardIDs) {\n\t\t\tconst data = await monday.api(`{\n  boards (ids: [${this.state.boardIDs}]) {\n    id\n    name\n    items (limit: 5000) {\n      id\n      name\n    column_values {\n      id\n        text\n        value\n    }\n    }\n  }\n}`);\n\t\t\tlet list = [];\n\t\t\tfor (const board of data.data.boards) {\n\t\t\t\tfor (const item of board.items) {\n\t\t\t\t\tfor (const columnValue of item.column_values) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!this.state.filterUser ||\n\t\t\t\t\t\t\tthis.state.filterUser.teammates.length === 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tlist.push({ ...item, boardID: board.id, boardName: board.name });\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (columnValue.id === \"person\") {\n\t\t\t\t\t\t\tconst value = JSON.parse(columnValue.value).id;\n\t\t\t\t\t\t\tif (this.state.filterUser.teammates.includes(`${value}`)) {\n\t\t\t\t\t\t\t\tlist.push({\n\t\t\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\t\t\tboardID: board.id,\n\t\t\t\t\t\t\t\t\tboardName: board.name,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst storage = await monday.storage.instance.getItem(\"order\");\n\t\t\tif (storage && storage.data.value) {\n\t\t\t\tconst order = storage.data.value.split(\",\");\n\n\t\t\t\tlist = order.map((orderID) => {\n\t\t\t\t\treturn list.find((listItem) => {\n\t\t\t\t\t\treturn listItem.id === orderID;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.setState({ list });\n\t\t}\n\t};\n\n\tasync componentDidMount() {\n\t\t// TODO: set up event listeners\n\t\tmonday.listen(\"settings\", (res) => {\n\t\t\tthis.setState({ filterUser: res.data.users }, () => {\n\t\t\t\tthis.filter();\n\t\t\t});\n\t\t});\n\n\t\tmonday.listen(\"context\", async (res) => {\n\t\t\tif (res.data.boardIds) {\n\t\t\t\tthis.setState({ boardIDs: res.data.boardIds }, () => {\n\t\t\t\t\tthis.filter();\n\t\t\t\t});\n\n\t\t\t\tif (res.data.boardIds && res.data.boardIds.length > 0) {\n\t\t\t\t\tconst data = await monday.api(`{\n            boards (ids: [${res.data.boardIds[0]}]) {\n              columns {\n                id\n                title\n                settings_str\n              }\n            }\n          }`);\n\n\t\t\t\t\tconst statusCol = data.data.boards[0].columns.find((col) => {\n\t\t\t\t\t\treturn col.id === \"status\";\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tstatusColSettings: JSON.parse(statusCol.settings_str),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// const data = await monday.api(`query { items () {\n\t\t// board {\n\t\t//   id\n\t\t// }\n\t\t// id\n\t\t// name\n\t\t// } }`)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Container className=\"App\">\n\t\t\t\t<div style={{ padding: 10 }}>\n\t\t\t\t\t<List>\n\t\t\t\t\t\t<ReactSortable\n\t\t\t\t\t\t\tlist={this.state.list}\n\t\t\t\t\t\t\tsetList={async (newState) => {\n\t\t\t\t\t\t\t\tthis.setState({ list: newState });\n\t\t\t\t\t\t\t\tconst toStore = newState.map((item) => {\n\t\t\t\t\t\t\t\t\treturn item.id;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (toStore.length > 0) {\n\t\t\t\t\t\t\t\t\tawait monday.storage.instance.setItem(\n\t\t\t\t\t\t\t\t\t\t\"order\",\n\t\t\t\t\t\t\t\t\t\ttoStore.join(\",\")\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.state.list.map((item) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ListRow\n\t\t\t\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\t\t\t\t\tstatusColSettings={this.state.statusColSettings}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ReactSortable>\n\t\t\t\t\t</List>\n\t\t\t\t\t<div style={{ textAlign: \"center\" }}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tonClick={async (e) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait monday.storage.instance.deleteItem(\"order\");\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClear Order\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nclass ListRow extends React.Component {\n\tstate = {\n\t\tstatus: this.props.item.column_values.find((col) => {\n\t\t\treturn col.id === \"status\";\n\t\t}),\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{ marginTop: 5, marginBottom: 5, padding: 5 }}>\n\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t<ListItem button>\n\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t<ListItemText>{this.props.item.name}</ListItemText>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\tvalue={this.state.status ? this.state.status.text : \"(empty)\"}\n\t\t\t\t\t\t\t\tonChange={(evt) => {\n\t\t\t\t\t\t\t\t\tthis.setState({ status: { text: evt.target.value } });\n\n\t\t\t\t\t\t\t\t\tlet index;\n\n\t\t\t\t\t\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\t\t\t\t\t\tthis.props.statusColSettings.labels\n\t\t\t\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t\t\t\tif (value === evt.target.value) {\n\t\t\t\t\t\t\t\t\t\t\tindex = key;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tmonday\n\t\t\t\t\t\t\t\t\t\t.api(\n\t\t\t\t\t\t\t\t\t\t\t`mutation { change_column_value (item_id: ${\n\t\t\t\t\t\t\t\t\t\t\t\tthis.props.item.id\n\t\t\t\t\t\t\t\t\t\t\t}, board_id: ${\n\t\t\t\t\t\t\t\t\t\t\t\tthis.props.item.boardID\n\t\t\t\t\t\t\t\t\t\t\t}, column_id: \"status\", value: \"${JSON.stringify({\n\t\t\t\t\t\t\t\t\t\t\t\tindex: parseInt(index),\n\t\t\t\t\t\t\t\t\t\t\t}).replace(/\"/g, '\\\\\"')}\"){id}}`\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t\"Backlog\",\n\t\t\t\t\t\t\t\t\t\"Hot Fix\",\n\t\t\t\t\t\t\t\t\t\"Doing\",\n\t\t\t\t\t\t\t\t\t\"Done\",\n\t\t\t\t\t\t\t\t\t\"Roadblocked\",\n\t\t\t\t\t\t\t\t\t\"In Process\",\n\t\t\t\t\t\t\t\t\t\"On Hold\",\n\t\t\t\t\t\t\t\t\t\"To Do\",\n\t\t\t\t\t\t\t\t\t\"(empty)\",\n\t\t\t\t\t\t\t\t].map((item, index) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={item} key={index}>\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</ListItem>\n\t\t\t\t</Grid>\n\t\t\t\t{/*<Divider style={{ marginTop: 5, marginBottom: 5 }} />*/}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}